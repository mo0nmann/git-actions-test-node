name: Angular CI
description: 'Builds, tests, and deploys a Node.js Angular application'

inputs:
  github_token:
    description: 'Automatically created token. Set this to the GITHUB_TOKEN secret'
    required: true
  gitleaks_token:
    description: 'Organisational token for Gitleaks'
    required: false # only required for Organizations, not personal accounts
  node_version:
    description: 'Node Version'
    required: false
  sonar_token:
    description: 'Token for SonarCloud access'
    required: true
  sonar_args:
    description: 'Custom SonarCloud arguments'
    required: true
  docker_image_name:
    description: 'Docker image name'
    required: true
  container_registry:
    description: 'Container Registry'
    required: true
  container_registry_username:
    description: 'Container Registry username'
    required: true
  container_registry_password:
    description: 'Container Registry password'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Get branch names.
      id: branch-names
      uses: tj-actions/branch-names@v8

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   

    - name: Validate conventional commits
      uses: wagoid/commitlint-github-action@v6    

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITLEAKS_LICENSE: ${{ inputs.gitleaks_token }}

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}

    - name: Install dependencies
      run: npm ci
      shell: bash

    - name: Create test:ci
      run: npm pkg set scripts.test:ci="ng test --no-watch --no-progress --browsers=ChromeHeadless"
      shell: bash

    - name: Test Angular application (headless)
      run: npm run test:ci
      shell: bash

    - name: Sonarcloud SAST
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      with:
        args: ${{ inputs.sonar_args }}

    - name: Add QEMU support
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Format test image tag for caching
      run: |
        echo "formatted_branch_name=$(echo ${{ steps.branch-names.outputs.current_branch }} | sed 's/\//-/g')" >> $GITHUB_ENV
      shell: bash

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        load: true
        tags: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.docker_image_name }}:${{ env.formatted_branch_name }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Login to container repository
      if: ${{ steps.branch-names.outputs.current_branch == 'main' }} 
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container_registry }}
        username: ${{ inputs.container_registry_username }}
        password: ${{ inputs.container_registry_password }}

    - name: Semantic Release
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && github.event_name == 'push' }} 
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      with:
        branch: main
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Extract metadata (tags, labels) for Docker
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && steps.semantic.outputs.new_release_published == 'true' }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.container_registry_username }}/${{ inputs.docker_image_name }}
        tags: |
          ${{ steps.semantic.outputs.new_release_version }}
          latest
          
    - name: Build and push image to container registry
      if: ${{ steps.branch-names.outputs.current_branch == 'main' && steps.semantic.outputs.new_release_published == 'true' }}
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}